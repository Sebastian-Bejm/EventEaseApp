@page "/events"

@using EventEase.Models
@using EventEase.Services
@inject EventEase.Services.EventService EventService

<NavLink href="/register-event" class="btn btn-primary mb-3">➕ Add New Event</NavLink>

<h3>Upcoming Events</h3>

@if (pagedEvents.Count == 0)
{
    <p>No events available.</p>
}
else
{
    <ul class="list-group">
        @foreach (var ev in pagedEvents)
        {
            <li class="list-group-item" @key="ev">
                <strong>@ev.Name</strong><br />
                📅 @ev.Date.ToShortDateString() <br />
                📍 @ev.Location
            </li>
        }
    </ul>

    <div class="mt-3">
        <button class="btn btn-outline-secondary me-2" @onclick="PreviousPage" disabled="@IsFirstPage">← Previous</button>
        <span>Page @CurrentPage of @TotalPages</span>
        <button class="btn btn-outline-secondary ms-2" @onclick="NextPage" disabled="@IsLastPage">Next →</button>
    </div>
}

@code {
    private List<Event> allEvents = new();
    private List<Event> pagedEvents = new();

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;

    private int TotalPages => (int)Math.Ceiling((double)allEvents.Count / PageSize);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    protected override void OnInitialized()
    {
        allEvents = EventService.GetEvents().ToList();
        UpdatePagedEvents();
    }

    private void UpdatePagedEvents()
    {
        pagedEvents = allEvents
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            UpdatePagedEvents();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            UpdatePagedEvents();
        }
    }
}
